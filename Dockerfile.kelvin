FROM node:20-alpine AS base

ENV PNPM_HOME="/pnpm"
ENV PATH="$PNPM_HOME:$PATH"
RUN apk add --no-cache git
RUN npm install -g pnpm@10.6.2

WORKDIR /app
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# If /.env-file/.env is mounted into the container, its variables are made available to the server before it starts up.
RUN mkdir -p /.env-file && touch /.env-file/.env && chown -R nextjs:nodejs /.env-file

# COPY --chown=nextjs:nodejs ./docker/apps/login/.next/standalone ./
# COPY --chown=nextjs:nodejs ./docker/apps/login/.next/static ./apps/login/.next/static
# COPY --chown=nextjs:nodejs ./docker/apps/login/public ./apps/login/public

COPY packages /app/packages
COPY package.json /app
COPY .npmrc /app
COPY .nvmrc /app
COPY turbo.json /app
COPY pnpm-lock.yaml /app
COPY pnpm-workspace.yaml /app
COPY apps /app/apps


FROM base AS prod-deps
RUN --mount=type=cache,id=pnpm,target=/pnpm/store pnpm install --prod --frozen-lockfile

FROM base AS build
RUN --mount=type=cache,id=pnpm,target=/pnpm/store pnpm install --frozen-lockfile
RUN pnpm run build

RUN ls -la /app

FROM base

COPY --from=build /app/apps ./app/apps

USER nextjs

ENV HOSTNAME="0.0.0.0"
EXPOSE 3100

# CMD ["/bin/sh", "-c", " set -o allexport && . /.env-file/.env && set +o allexport && node /app/server.js"]
CMD ["pnpm", "start", "--port=3100", "--hostname=kelvin-zitadel-ui.dev.eight9.net"]

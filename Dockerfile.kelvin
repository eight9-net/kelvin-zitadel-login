FROM node:20-alpine AS base

ENV PNPM_HOME="/pnpm"
ENV PATH="$PNPM_HOME:$PATH"
RUN apk add --no-cache git curl
RUN npm install -g pnpm@10.6.2

WORKDIR /app
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# If /.env-file/.env is mounted into the container, its variables are made available to the server before it starts up.
RUN mkdir -p /.env-file && touch /.env-file/.env && chown -R nextjs:nodejs /.env-file

# COPY --chown=nextjs:nodejs ./docker/apps/login/.next/standalone ./
# COPY --chown=nextjs:nodejs ./docker/apps/login/.next/static ./apps/login/.next/static
# COPY --chown=nextjs:nodejs ./docker/apps/login/public ./apps/login/public

ADD packages /app/packages
ADD apps /app/apps
COPY package.json /app
COPY .npmrc /app
COPY .nvmrc /app
COPY turbo.json /app
COPY pnpm-lock.yaml /app
COPY ./pnpm-workspace.yaml /app
COPY launch.sh /app



# FROM base AS prod-deps
# RUN --mount=type=cache,id=pnpm,target=/pnpm/store pnpm install --prod --frozen-lockfile

FROM base AS build
RUN --mount=type=cache,id=pnpm,target=/pnpm/store pnpm install --frozen-lockfile
RUN --mount=type=cache,id=pnpm,target=/pnpm/store cd /app/apps/login && pnpm install --frozen-lockfile
RUN pnpm run build

FROM base

COPY --from=build --chown=nextjs:nodejs /app/apps /app/apps
COPY --from=build --chown=nextjs:nodejs /pnpm /pnpm
COPY --from=build --chown=nextjs:nodejs /app/node_modules /app/node_modules

RUN chown -R nextjs:nodejs /app

USER nextjs

EXPOSE 3100

# CMD ["pnpm", "start", "--port=3100", "--hostname=kelvin-zitadel-ui.dev.eight9.net"]
ENTRYPOINT [ "" ]
